[["index.html", "Notes Chapter 1 Welcome", " Notes Laurie Platt 2021-02-21 Chapter 1 Welcome This is a place for ad-hoc notes, mainly to do with scripting and mainly R scripts. It’s somewhere to store lessons learnt and examples. A resource to remind yourself if you return to something after a while away from it, or to smooth your path a little if it’s something new. There are many excellent online resources that these notes will point to and will not attempt to replace. Overtime some notes may mature into package vignettes or become accepted as good practice and included in the Methods Manual. Hopefully, others from the Performance &amp; Intelligence Team, or elsewhere in Sheffield City Council, will contribute to these notes. However, currently it’s just one person and is biased to one person’s recent experience: ETL, geocoding and spatial analysis. Notes about modelling and visualisations are lacking. As well as the contributors and content, the purpose and scope is open to change. I hope you find the notes useful. "],["github.html", "Chapter 2 Version Control &amp; GitHub 2.1 GitHub 2.2 Version control 2.3 GIT", " Chapter 2 Version Control &amp; GitHub You don’t have to be familiar with version control, Git and GitHub to make use of these notes or the contents of the scc-pi repositories. If you’re new to scripting and R, visualisations or using R Markdown are better starting points than version control. These notes are public, but to contribute i.e. edit them, you need a GitHub account and to be granted permission by an owner of scc-pi (try Laurie first, but Giles and Anne could help too). Then you can edit directly in GitHub via your browser. You also need a GitHub account and permission to access one of our private repositories, but not for our public repositories, to download a file, copy &amp; paste code, or source and use a function: # Load functions for Sheffield areas from a public scc-pi repository source(&quot;https://raw.githubusercontent.com/scc-pi/functions/main/ShefAreas.R&quot;) # Call one of our Sheffield area functions that returns LSOA codes shef_lsoa_codes() %&gt;% head(5) %&gt;% #only display the first 5 records knitr::kable() #display them in a nice table ## [1] &quot;Table&quot; LSOA11CD LSOA11NM E01008124 Sheffield 012F E01008125 Sheffield 009G E01007917 Sheffield 071B E01033273 Sheffield 042F E01007967 Sheffield 045B Try raising an issue if you spot a problem, have a suggestion or a question. 2.1 GitHub TODO - free account - scc-pi 2.1.1 Security &amp; Data Protection 2.2 Version control TODO 2.3 GIT TODO "],["r.html", "Chapter 3 R &amp; RStudio 3.1 Why script? 3.2 Style guide 3.3 RStudio security &amp; data protection 3.4 Getting started 3.5 RStudio tips", " Chapter 3 R &amp; RStudio 3.1 Why script? I initially started scripting in Python to automate some spatial analysis tasks, but soon realised that reproducibility was the main advantage. Iterating, improving a process incrementally and at the end verifying the results by re-running the script. There’s an element of self-documentation with scripting, so it’s easier to return after a bit of time to a scripted task, or pick up a scripted task from a colleague. However, in-line comments and adherence to a style guide make a big difference to just how easy it is. Version control and collaboration are also easier with scripting than GUI tools. Scripting is not always better than using GUI tools. It’s horses for courses, and some GUI workflow tools (e.g. FME, Simul8 and ModelBuilder in ArcGIS) sit somewhere in the middle. 3.2 Style guide Something I need to pay more attention to is following the tidyverse style guide, which benefits from supporting tools and familiarity via tidyverse package documentation. Scripting to the same style guide makes collaboration easier. Which style guide is less important than collaborators scripting to a single style guide. 3.3 RStudio security &amp; data protection TODO 3.4 Getting started TODO - RStudio essentials webinars - R for Data Science - Tidyverse - learnR 3.5 RStudio tips TODO - Renviron - Write settings "],["rmd.html", "Chapter 4 R Markdown 4.1 R Markdown vs Markdown 4.2 R Markdown Tips 4.3 Child markdown iteration 4.4 Notebooks 4.5 Bookdown 4.6 Further Resources", " Chapter 4 R Markdown 4.1 R Markdown vs Markdown TODO 4.2 R Markdown Tips Naming a code block setup means that after you restart RStudio and execute any code in the middle of your markdown document, the setup block will run first e.g. to make sure your libraries are loaded first: # Packages library(tidyverse) The RStudio v1.4 release includes a visual editor for markdown, which makes it more like using MS Word: 4.3 Child markdown iteration TODO - example based on C19 UoS example - not a prominent technique because the demand for such reports has largely been superseded by browser base dashboards such as those provided via Power BI or Shiny 4.4 Notebooks TODO - technical vs data exploration - don’t add to github 4.5 Bookdown These notes are written using the bookdown package , which was built on top of R Markdown and knitr. Each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. 4.5.1 Publishing These notes are published on GitHub Pages with GitHub Actions. A GitHub Action has been configured to start when there’s a push to the master branch. The Action renders the Rmd files in the master branch to HTML and then deploys the HTML files as a static website to a branch called gh-pages. Alternatives to using GitHub Actions include Travis and Jekyll. I used the steps outlined in the following blog post: How to publish bookdown projects with GitHub Actions on GitHub Pages. However, I did a lot of the git bash commands manually and there were a couple of fixes I made to the deploy_bookdown.yaml file: 1. Under … uses: Cecilapp/GitHub-Pages-deploy@master … I added … with: build_dir: _book/ email: ${{ secrets.EMAIL }} 2. I used GITHUB_TOKEN rather than GH_PAT, as per a recent change to GitHub-Pages-deploy. 4.6 Further Resources Authoring Books with R Markdown by Yihui Xie is the definitive resource for bookdown. "],["api.html", "Chapter 5 APIs 5.1 RESTful APIs 5.2 Wrappers", " Chapter 5 APIs 5.1 RESTful APIs TODO - Foundation for Council services 5.2 Wrappers TODO "],["python.html", "Chapter 6 Python 6.1 Reticulate 6.2 ArcGIS", " Chapter 6 Python 6.1 Reticulate TODO reticulate R package. 6.2 ArcGIS The Council’s ArcGIS software from ESRI has a much stronger integration with Python than R. ESRI’s Python integration with ArcGIS is via two main packages. The arcgis package is what we’re going to use here to work with the Council’s web based GIS infrastructure. The arcpy package would be used to leverage the ArcGIS desktop functionality. The distinction between web and desktop for arcgis and arcpy packages respectively is an oversimplification, but it serves a purpose. It’s worth noting that the integration between the two packages isn’t as seamless as you might expect. To use the arcpy or arcgis packages we first need to specify the ArcGIS Python environment TODO 6.2.1 ArcPy TODO 6.2.2 ArcGIS API TODO "],["gis.html", "Chapter 7 GIS 7.1 Features 7.2 Simple Features 7.3 Coordinates &amp; Projections 7.4 ArcGIS 7.5 Rasters", " Chapter 7 GIS 7.1 Features The term “feature” is useful to distinguish a record as “spatial”. By “spatial” we mean it is a point, a line or a polygon. A point is a pair of coordinates, a line a minimum of two pairs of coordinates and polygons. Something to keep an eye out for is MULTIPOINT, multi-part polygons etc. This is a single record, a single feature, but it has more than one point, line or polygon. For example, Sheffield secondary school features might be MULTIPOINT so that the feature for King Edward VII school can have one point for the Lower School near Crosspool, and another point for the Upper School in Broomhill. 7.2 Simple Features TODO 7.3 Coordinates &amp; Projections TODO 7.4 ArcGIS TODO 7.5 Rasters TODO "],["geocoding.html", "Chapter 8 Postcodes &amp; Addresses 8.1 UPRN 8.2 Postcodes 8.3 Addresses", " Chapter 8 Postcodes &amp; Addresses 8.1 UPRN TODO 8.2 Postcodes 8.2.1 Split postcodes TODO 8.3 Addresses TODO - Portal LLPG Cascade Locator - OS Places ESRI integration "],["public-data.html", "Chapter 9 Public Data Sources 9.1 Office of National Statistics 9.2 Ordnance Survey", " Chapter 9 Public Data Sources 9.1 Office of National Statistics TODO 9.1.1 CRM TODO 9.1.2 NOMIS TODO 9.1.3 Open Geography Portal TODO 9.2 Ordnance Survey TODO 9.2.1 OS Data Hub TODO "],["databases.html", "Chapter 10 Databases 10.1 OSCAR 10.2 Corporate Spatial Database 10.3 SQLite", " Chapter 10 Databases 10.1 OSCAR TODO 10.2 Corporate Spatial Database TODO 10.3 SQLite TODO 10.3.1 SpatiaLite TODO "],["references.html", "References", " References "]]
