[["index.html", "Notes Welcome", " Notes Laurie Platt 2021-03-09 Welcome This is a place for ad-hoc notes, mainly to do with scripting and mainly R scripts. It’s somewhere to store lessons learnt and examples. A resource to remind yourself if you return to something after a while away from it, or to smooth your path a little if it’s something new. There are many excellent online resources that these notes will point to and will not attempt to replace. Overtime some notes may mature into package vignettes or become accepted as good practice and included in the Methods Manual. Hopefully, others from the Performance &amp; Intelligence Team, or elsewhere in Sheffield City Council, will contribute to these notes. However, currently it’s just one person and is biased to one person’s recent experience: ETL, geocoding and spatial analysis. Notes about modelling and visualisations are lacking. As well as the contributors and content, the purpose and scope is open to change. I hope you find the notes useful. "],["github.html", "Chapter 1 Version Control &amp; GitHub 1.1 Why version control? 1.2 GIT 1.3 GitHub 1.4 Git &amp; RStudio", " Chapter 1 Version Control &amp; GitHub You don’t have to be familiar with version control, Git and GitHub to make use of these notes or the contents of the scc-pi repositories. If you’re new to scripting and R, visualisations or using R Markdown are better starting points than version control. These notes are public, but to contribute i.e. edit them, you need a GitHub account and to be granted permission by an owner of scc-pi (try Laurie first, but Giles and Anne could help too). Then you can edit directly in GitHub via your browser. You also need a GitHub account and permission to access one of our private repositories, but not for our public repositories, to download a file, copy &amp; paste code, or source and use a function: # Load functions from a public scc-pi repository source(&quot;https://raw.githubusercontent.com/scc-pi/functions/main/Examples.R&quot;) # Call one of our Sheffield area functions that returns LSOA codes shef_lsoa_codes() %&gt;% head(5) %&gt;% #only display the first 5 records knitr::kable() #display them in a nice table ## [1] &quot;Table&quot; LSOA11CD LSOA11NM E01008124 Sheffield 012F E01008125 Sheffield 009G E01007917 Sheffield 071B E01033273 Sheffield 042F E01007967 Sheffield 045B Try raising an issue if you spot a problem, have a suggestion or a question. 1.1 Why version control? When scripting I take a backup of a file, so if the changes I make break what I’ve previously done, I can revert to the previous version. If I’m collating contributions to a document from different people I might use their initials to indicate who’s made contributions in what version e.g. “BI_Principles-GR.docx” and “BI_Principles-NM.docx”. These are both examples of manual version control. When we talk about version control and scripting we typically mean a version control system. A tool that assists with tracking changes to files over time and by different people. Such systems also usually include reasons for the changes, and file, or rather version, comparison functionality. So a version control system is a backup/audit trail/collaboration thing. 1.2 GIT Git is an open-source distributed version control system for tracking changes in source code during software development. 1.3 GitHub GitHub is a product that offers Git-based source control repositories. Other products also offer Git-based repositories, such as GitLab, BitBucket, and Azure DevOps. Our scc-pi GitHub organisation is a free account. It has had no approval as such. If using it proves successful we will need to discuss approval with BCIS. 1.3.1 Github security &amp; data protection Assuming that GitHub.com is hosted in the US, it will not meet our data protection obligations. Either way, we’ve not checked compliance with Information Governance, so storing PID (Person Identifiable Data), or anything commercially confidential or politically sensitive, on GitHub.com is currently a no no. As an additional precaution, any projects related to such information should be held in a private repository. See the section on RStudio security &amp; data protection for further considerations. Microsoft own GitHub and GitHub Enterprise Server is the on-premises deployment of GitHub.com that could be hosted on our own Azure environment. 1.3.2 Forking and pull requests GitHub forking and pull requests are common workflows when collaborating on a repository. TODO - we’ll have more to add on this if we collaborate on a repository 1.3.3 Other features GitHub now allows private repositories on free organisation accounts, but not all GitHub features are available. The evolution of a repository is captured by commits i.e. the changes to files in the repository. However, the original issue, ideas or discussion surrounding a commit is captured in a GitHub issue. You can link a commit to an issue by including the issue number prefixed by # in the commit message. I’ve used a GitHub project to organise our private C19Surveillance repository as a kanban board. However, a project is not restricted to issues or a single repository. GitHub pages and actions have been used to publish these notes. There are also other GitHub features to explore. 1.4 Git &amp; RStudio Introduction to GitHub on the GitHub Learning Lab is a good place to get started and become familiar with some initial concepts and the GitHub website. To use GitHub with RStudio there’s a thorough step-by-step guide, Happy Git with R by Jenny Bryan. My main recommendation is to setup the connection using keys for SSH. This connection method by-passes the issues I had with the Council’s proxy server and using the HTTPS connection method. I’ve also had no issues since working from home and connecting via the Tunnel. I frequently return to Jenny Bryan’s book, especially for chapters 15, 16 and 17 on different ways of setting up a local RStudio project connected to GitHub. So far, I’ve mainly stuck with Chapter 15 New project, GitHub first. "],["r.html", "Chapter 2 R &amp; RStudio 2.1 Why script? 2.2 Style guide 2.3 RStudio security &amp; data protection 2.4 Getting started 2.5 RStudio tips", " Chapter 2 R &amp; RStudio 2.1 Why script? I initially started scripting in Python to automate some spatial analysis tasks, but soon realised that reproducibility was the main advantage. Iterating, improving a process incrementally and at the end verifying the results by re-running the script. There’s an element of self-documentation with scripting, so it’s easier to return to a scripted task after a bit of time away from it, or pick up a scripted task from a colleague. However, in-line comments and adherence to a style guide make a big difference to just how easy it is. Version control and collaboration are also easier with scripting than GUI tools. Scripting is not always better than using GUI tools. There’s a good reason that more people use Mac OS and Windows than Unix Bash. Scripting or GUI tools is a horses for courses question, and some GUI workflow tools (e.g. FME, Simul8 and ModelBuilder in ArcGIS) sit somewhere in the middle. 2.2 Style guide Something I need to pay more attention to is following the tidyverse style guide, which benefits from supporting tools and familiarity via tidyverse package documentation. Scripting to the same style guide makes collaboration easier. Which style guide is less important than collaborators scripting to the same style guide. 2.3 RStudio security &amp; data protection 2.3.1 Workspace To encourage reproducible R scripts, Hadley Wickham recommends not preserving your workspace between sessions. This entails deselecting a couple of options to save and restore .Rdata (see chapter 8 Workflow: projects in Hadley’s R4DS book). Hadley’s recommendation also reduces the chances of inadvertently sharing PID in a GitHub repository. However, .Rdata should also be included in the .gitignore file and the repository set to private. 2.3.2 Passwords It’s poor practice to include login details in code. I use the .Renviron file option for securing credentials. However, if you’re sharing the script you can anticipate that the environment variable might not be set and use the RStudio API to prompt for credentials. For example: portal_pwd &lt;- Sys.getenv(&quot;portal_pwd&quot;) if(length(portal_pwd) == 0){ portal_pwd &lt;- rstudioapi::askForPassword(&quot;Portal password&quot;) } 2.4 Getting started I’m not going to provide advice on getting started, other than signposting to the excellent resources listed on the RStudio beginners page: RStudio Education - Beginners 2.5 RStudio tips 2.5.1 Code display A few non-default Global Options, under Code and Display, make it a little easier to read and write code: Show margin (aim to limit line of code 80 characters) Highlight R function calls Rainbow parentheses (since RStudio v1.4) 2.5.2 Document outline and headings Code sections and subsections are useful: # Prefix a section with a hash tag and suffix with 4 or more dashes ---- ## Subsections have additional hash tags ---- The sections can be collapsed and are also listed in the document outline pane: 2.5.3 ViewPipeSteps addin The pipe %&gt;% is useful for reading and writing code, but can make debugging cumbersome. The ViewPipeSteps addin lets you view the output of your pipe chain after each step. To install: devtools::install_github(&quot;daranzolin/ViewPipeSteps&quot;) library(ViewPipeSteps) To use: 2.5.4 Shortcuts RStudio has lots of shortcuts. What you find most useful is down to preference and the areas of the IDE you use most often. These are the shortcuts I’ve found most useful: Ctrl + Enter run selected lines Ctrl + Alt + P re-run previous Ctrl + Shift + C comment/uncomment lines Ctrl + Alt + A reformat code Ctrl + Shift + R insert section Alt + - assignment operator &lt;- Ctrl + Shift + M pipe operator %&gt;% Ctrl + left mouse button View the object clicked Ctrl + Shift + F10 Restart R session Ctrl + Shift + P Command palette TODO Write settings "],["rmd.html", "Chapter 3 R Markdown 3.1 R Markdown vs Markdown 3.2 Child markdown iteration 3.3 Notebooks 3.4 Bookdown 3.5 Further resources 3.6 R Markdown tips", " Chapter 3 R Markdown 3.1 R Markdown vs Markdown TODO 3.2 Child markdown iteration TODO - example based on C19 UoS example - not a prominent technique because the demand for such reports has largely been superseded by browser base dashboards such as those provided via Power BI or Shiny 3.3 Notebooks TODO - technical vs data exploration - don’t add to github 3.4 Bookdown These notes are written using the bookdown package , which was built on top of R Markdown and knitr. Each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. 3.4.1 Publishing These notes are published on GitHub Pages with GitHub Actions. A GitHub Action has been configured to start when there’s a push to the master branch. The Action renders the Rmd files in the master branch to HTML and then deploys the HTML files as a static website to a branch called gh-pages. Alternatives to using GitHub Actions include Travis and Jekyll. I used the steps outlined in the following blog post: How to publish bookdown projects with GitHub Actions on GitHub Pages. However, I did a lot of the git bash commands manually and there were a couple of fixes I made to the deploy_bookdown.yaml file: 1. Under … uses: Cecilapp/GitHub-Pages-deploy@master … I added … with: build_dir: _book/ email: ${{ secrets.EMAIL }} 2. I used GITHUB_TOKEN rather than GH_PAT, as per a recent change to GitHub-Pages-deploy. 3.5 Further resources Authoring Books with R Markdown by Yihui Xie is the definitive resource for bookdown. 3.6 R Markdown tips 3.6.1 Markdown visual editor The RStudio v1.4 release includes a visual editor for markdown, which makes it more like using MS Word: 3.6.2 Chunk named setup Naming a code block setup means that after you restart RStudio and execute any code in the middle of your markdown document, the setup block will run first. For example, to make sure your libraries are loaded first: ```{r, setup, message = FALSE, warning = FALSE} # Packages library(tidyverse) ``` "],["api.html", "Chapter 4 APIs 4.1 REST APIs 4.2 Wrappers 4.3 Rectangling", " Chapter 4 APIs 4.1 REST APIs RESTful TODO - Foundation for Council services 4.2 Wrappers TODO 4.3 Rectangling Data returned from REST APIs are typically provided in a hierarchical structure and JSON is the most common format. To structure the data from the API into a more familiar tabular structure I recommend the tidyverse Rectangling vignette. TODO scc-pi functions with rectangling e.g. postcode and geocoding "],["python.html", "Chapter 5 Python 5.1 Reticulate 5.2 ArcGIS", " Chapter 5 Python 5.1 Reticulate TODO reticulate R package. 5.2 ArcGIS The Council’s ArcGIS software from ESRI has a much stronger integration with Python than R. ESRI’s Python integration with ArcGIS is via two main packages. The arcgis package is what we’re going to use here to work with the Council’s web based GIS infrastructure. The arcpy package would be used to leverage the ArcGIS desktop functionality. The distinction between web and desktop for arcgis and arcpy packages respectively is an oversimplification, but it serves a purpose. It’s worth noting that the integration between the two packages isn’t as seamless as you might expect. To use the arcpy or arcgis packages we first need to specify the ArcGIS Python environment TODO 5.2.1 ArcPy TODO 5.2.2 ArcGIS API TODO "],["gis.html", "Chapter 6 GIS 6.1 Features 6.2 Simple features 6.3 Coordinates &amp; projections 6.4 ArcGIS 6.5 Rasters 6.6 Further resources", " Chapter 6 GIS 6.1 Features The term “feature” is useful to distinguish a record as “spatial”. By “spatial” we mean it has a point, a line or a polygon. A point is a pair of coordinates, a line a minimum of two pairs of coordinates and polygons at least three pairs. Something to keep an eye out for is MULTIPOINT, multi-part polygons etc. This is a single record, a single feature, but it has more than one point, line or polygon. For example, Sheffield secondary school features might be MULTIPOINT so that the feature for King Edward VII school can have one point for the Lower School near Crosspool, and another point for the Upper School in Broomhill. 6.2 Simple features Simple features is an open standard developed by the Open Geospatial Consortium. It is a hierarchical data model that represents a wide range of geometry types, all of which are supported by the sf R package. The sf package also plays nice with the tidyverse. 6.3 Coordinates &amp; projections The minimum you need to know is that any spatial data you use is likely to be based on one of two coordinate systems: WSG84 with an ESPG of 4326. OSGB1936 (British National Grid) with an ESPG of 27700 WSG84 has become something of a default for web maps. Postcodes.io uses WSG84, but the Council’s Portal and the ONS Open Geography Portal use OSGB1936 (TODO: need to double check this!!). TODO: EPSG:3857 (Pseudo-Mercator)?? # Create a data frame with some example records df &lt;- tibble::tribble( ~name, ~postcode, ~longitude, ~latitude, &quot;SCC, Town Hall&quot;, &quot;S1 2HH&quot;, -1.470006, 53.38038, &quot;Blades, Bramall Lane&quot;, &quot;S2 4SU&quot;, -1.470512, 53.36986, &quot;Owls, Hillsborough&quot;, &quot;S6 1SW&quot;, -1.500859, 53.41084 ) # Create simple features sf_shef &lt;- sf::st_as_sf(df, coords = c(&quot;longitude&quot;, &quot;latitude&quot;), #from postcodes.io crs = 4326) #WSG84 # Plot mapview::mapview(sf_shef, layer.name = &quot;Sheffield&quot;) 6.3.1 Geographic &amp; projected coordinate systems A reference ellipsoid as an approximation of the surface of the earth and provides a shape on which a coordinate system can be placed. Geographic coordinate systems use the ellipsoid to define specific locations on the surface to create a grid. When we use longitude and latitude we are using geographic coordinates. Datums are geographic coordinate systems based on a specific ellipsoid (so a more specific geographic coordinate system), with an origin at a specific location, and the ellipsoid at a specific orientation. These are also called “spatial reference systems” or “coordinate reference systems”. Projected coordinate systems are like geographic coordinate systems. A projected coordinate system is also a grid used as a reference for locations on the planet, but it’s a translation of the three-dimensional grid onto a two-dimensional plane such as a paper map or screen. A GCS defines where the data is located on the earth’s surface. A PCS tells the data how to draw on a flat surface such as a screen. Coordinate systems, projected and geographic, are often identified by an EPSG code. 6.4 ArcGIS TODO 6.5 Rasters TODO 6.6 Further resources Geocomputation with R, by Robin Lovelace mapview basics vignette Geographic vs Projected Coordinate Systems, Heather Smith, ArcGIS Blog (27 February 2020) EPSG 4326 vs EPSG 3857 (projections, datums, coordinate systems, and more! Lyzi Diamond (26 May 2017) "],["geocoding.html", "Chapter 7 Postcodes &amp; Addresses 7.1 UPRN 7.2 Postcodes 7.3 Addresses", " Chapter 7 Postcodes &amp; Addresses A common use case in our work is to do some spatial analysis on a dataset with addresses. For example, produce a map of certain incidents over the last year, or summarise the number of incidents by Ward. 7.1 UPRN TODO 7.2 Postcodes If there’s no UPRN, getting a location via the postcode is usually the easiest option. It’s not as accurate as a UPRN or a full address, but often it’s accurate enough for what’s required. Below is an example of using our add_pcd_vars() function that builds on the PostcodesioR package, which itself is a wrapper for the postcodes.io API. You pass it a data frame with a postcode column and it returns the data frame with new columns based on the postcode. # Create a data frame with some example records df &lt;- tibble::tribble( ~name, ~postcode, &quot;SCC, Town Hall&quot;, &quot;S1 2HH&quot;, &quot;Blades, Bramall Lane&quot;, &quot;S2 4SU&quot;, &quot;Owls, Hillsborough&quot;, &quot;S6 1SW&quot; ) # Load the function we need source(&quot;https://raw.githubusercontent.com/scc-pi/functions/main/Addresses.R&quot;) # Add postcode related columns to our data frame add_pcd_vars(df, pcd_name = &quot;postcode&quot;, .admin_district = FALSE, .lat_long = TRUE, other_vars = c(&quot;admin_ward&quot;, &quot;msoa_code&quot;)) %&gt;% knitr::kable() #display them in a nice table name postcode longitude latitude admin_ward msoa_code SCC, Town Hall S1 2HH -1.470006 53.38038 City E02006843 Blades, Bramall Lane S2 4SU -1.470512 53.36986 City E02001652 Owls, Hillsborough S6 1SW -1.500859 53.41084 Hillsborough E02001627 admin_district can be used to answer the questions: Is it the postcode invalid? Is the postcode in Sheffield? You can anticipate values of NA and Sheffield respectively if the answers are yes. These are common questions so the function has an .admin_district argument. Needing the coordinates of the postcode centroid is also common, so the function also has a .lat_long argument that if TRUE returns both a latitude column and a longitude column. TODO: link to sf example &amp; area stats Other columns are added by including their name in a character vector passed with the other_vars function argument. For example, other_vars=c(\"ccg_code\",\"lsoa_code\"). The list of valid other_vars is defined at docs.ropensci.org/PostcodesioR/#examples. The pcd_name function argument is used to specify the name of the data frame’s postcode column when it isn’t postcode. For example, pcd_name=\"pupil_pcode\". Sometimes, the postcode in a dataset is not included as a separate column, but is at the end of a combined address column. Depending on the format and quality of the combined address column you could extract the postcode like this: # Create a data frame with some example records df &lt;- tibble::tribble( ~name, ~address, &quot;Bob Johnson&quot;, &quot;Pinstone St, Sheffield City Centre, Sheffield S1 2HH&quot;, &quot;Chris Wilder&quot;, &quot;Bramall Ln, Highfield, Sheffield S2 4SU&quot;, &quot;Neil Thompson&quot;, &quot;76 Penistone Rd N, Sheffield S6 1SW&quot; ) # Extract the postcode from the address into a separate column dplyr::mutate(df, postcode = stringr::word(address, -2, -1, sep = &quot;[:space:]&quot;)) %&gt;% knitr::kable() name address postcode Bob Johnson Pinstone St, Sheffield City Centre, Sheffield S1 2HH S1 2HH Chris Wilder Bramall Ln, Highfield, Sheffield S2 4SU S2 4SU Neil Thompson 76 Penistone Rd N, Sheffield S6 1SW S6 1SW 7.2.1 PAS Postcode Lookup PAS, the Performance &amp; Analysis Service in the People Porfolio, maintains a postcode lookup table that performs the same role as the add_pcd_vars() function. TODO: Does it also include Sheffield specific variables e.g. which of the 100 neighbourhoods is the postcode in? 7.2.2 Split postcodes TODO 7.3 Addresses TODO - Portal LLPG Cascade Locator - OS Places ESRI integration "],["public-data.html", "Chapter 8 Public Data Sources 8.1 Office of National Statistics 8.2 Ordnance Survey", " Chapter 8 Public Data Sources 8.1 Office of National Statistics TODO 8.1.1 CRM TODO 8.1.2 NOMIS TODO 8.1.3 Open Geography Portal TODO 8.2 Ordnance Survey TODO 8.2.1 OS Data Hub TODO "],["databases.html", "Chapter 9 Databases 9.1 Corporate data warehouse 9.2 Corporate spatial database 9.3 SQLite 9.4 Further resources", " Chapter 9 Databases 9.1 Corporate data warehouse 9.1.1 OSCAR TODO 9.2 Corporate spatial database TODO 9.3 SQLite Access to an SQLite database is controlled by permissions on the folder where it is stored. Unlike other databases, you do not create users who are authenticated by the database, and you do not grant privileges on specific datasets to other users. SQLite is also different from other databases in that fields are not assigned specific data types and data type definitions are not strictly enforced. Instead, SQLite uses storage classes in which values of different data types can be stored. In particular, date types are handled differently. ArcGIS handles SQLite dates without needing any special attention, but reading dates from SQLite in to R or Power BI needs attention. For example, by using the JD() function from the insol package: # Convert dates we&#39;ve read from a SQLite database mutate(date = JD(date, inverse = TRUE), week_end = JD(week_end, inverse = TRUE)) 9.3.1 SpatiaLite SpatiaLite extends SQLite to support spatial data. The RSQLite package includes the driver for SpatiaLite. Robin Lovelace has a chapter on spatial databases in his book Geocomputation with R. After testing different options, SpatiaLite is the best file based database for access to spatial data via tools such as R and Power BI without the complication of ArcGIS licenses, but it also provides reliable access for ArcGIS. So far I’ve only tested SpatiaLite databases created in ArcGIS 9.4 Further resources Databases using R from RStudio "],["references.html", "References", " References "]]
